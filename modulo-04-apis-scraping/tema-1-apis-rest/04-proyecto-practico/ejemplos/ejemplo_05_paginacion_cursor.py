"""
Ejemplo 5: Paginaci√≥n con Cursor

Aprende paginaci√≥n basada en cursor (m√°s robusta para datos din√°micos).
"""

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))


def ejemplo_concepto_cursor():
    """
    Entiende qu√© es un cursor y por qu√© existe.
    """
    print("=" * 60)
    print("EJEMPLO 5A: ¬øQu√© es un Cursor?")
    print("=" * 60)

    print("\nüìñ Concepto:")
    print("  Un cursor es un 'marcador' que indica d√≥nde est√°s")
    print("  en un conjunto de resultados.")
    print()

    print("üîÑ Flujo t√≠pico:")
    print("  1. Primera request ‚Üí recibes datos + cursor")
    print("  2. Segunda request con cursor ‚Üí m√°s datos + nuevo cursor")
    print("  3. Repetir hasta cursor = null")
    print()

    print("üì¶ Estructura de respuesta t√≠pica:")
    print("  {")
    print('    "data": [')
    print('      {"id": 1, "name": "Item 1"},')
    print('      {"id": 2, "name": "Item 2"}')
    print("    ],")
    print('    "pagination": {')
    print('      "next_cursor": "eyJpZCI6Mn0=",')
    print('      "has_more": true')
    print("    }")
    print("  }")

    print("\nüí° El cursor es opaco:")
    print("  - No intentes leerlo o modificarlo")
    print("  - Solo p√°salo a la siguiente request")
    print("  - La API decide su formato (base64, hash, etc.)")


def ejemplo_offset_vs_cursor():
    """
    Compara Offset/Limit vs Cursor.
    """
    print("\n" + "=" * 60)
    print("EJEMPLO 5B: Offset/Limit vs Cursor")
    print("=" * 60)

    print("\nüéØ Escenario: API de tweets en tiempo real")
    print()

    print("‚ùå Problema con Offset/Limit:")
    print("  1. Request 1: GET /tweets?offset=0&limit=10")
    print("     ‚Üí Recibes tweets 1-10")
    print()
    print("  2. ‚è∞ Mientras tanto: 5 tweets nuevos se publican")
    print()
    print("  3. Request 2: GET /tweets?offset=10&limit=10")
    print("     ‚Üí ¬°Recibes duplicados! (tweets 6-10 otra vez)")
    print()

    print("‚úÖ Soluci√≥n con Cursor:")
    print("  1. Request 1: GET /tweets")
    print("     ‚Üí Recibes tweets + cursor='abc123'")
    print()
    print("  2. ‚è∞ Nuevos tweets se publican")
    print()
    print("  3. Request 2: GET /tweets?cursor=abc123")
    print("     ‚Üí Recibes siguientes tweets (sin duplicados)")
    print("     El cursor 'recuerda' d√≥nde quedaste")

    print("\nüìä Comparaci√≥n:")
    print()
    print("  OFFSET/LIMIT          |  CURSOR")
    print("  -------------------- | --------------------")
    print("  ‚úÖ Simple            | ‚úÖ Sin duplicados")
    print("  ‚úÖ Saltar a p√°gina N | ‚úÖ Datos din√°micos")
    print("  ‚ùå Duplicados        | ‚úÖ M√°s eficiente")
    print("  ‚ùå Menos eficiente   | ‚ùå No saltar p√°ginas")


def ejemplo_apis_cursor():
    """
    Ejemplos de APIs reales que usan cursor.
    """
    print("\n" + "=" * 60)
    print("EJEMPLO 5C: APIs Reales con Cursor")
    print("=" * 60)

    print("\nüåê APIs que usan paginaci√≥n por cursor:")
    print()

    print("1Ô∏è‚É£  Twitter API v2:")
    print("   GET /tweets?max_results=10")
    print("   Response: { data: [...], meta: { next_token: 'xyz' } }")
    print("   Next: GET /tweets?max_results=10&pagination_token=xyz")
    print()

    print("2Ô∏è‚É£  GitHub GraphQL API:")
    print("   { users(first: 10) { edges { cursor, node } } }")
    print("   Cursor en cada elemento")
    print()

    print("3Ô∏è‚É£  Slack API:")
    print("   GET /conversations.history")
    print("   Response: { messages: [...], response_metadata: {")
    print("              next_cursor: 'dXNlcj...' } }")
    print()

    print("4Ô∏è‚É£  Stripe API:")
    print("   GET /charges?limit=10")
    print("   Response: { data: [...], has_more: true,")
    print("              starting_after: 'ch_123' }")


def ejemplo_uso_cursor():
    """
    Ejemplo conceptual de uso de cursor.
    """
    print("\n" + "=" * 60)
    print("EJEMPLO 5D: Uso de paginar_cursor()")
    print("=" * 60)

    print("\nüíª C√≥digo ejemplo:")
    print()
    print("  from src.paginacion import paginar_cursor")
    print()
    print("  # API hipot√©tica con cursor")
    print("  resultados = paginar_cursor(")
    print('      url="https://api.ejemplo.com/posts",')
    print('      campo_datos="data",           # D√≥nde est√°n los datos')
    print('      campo_cursor="pagination.next_cursor"  # D√≥nde est√° el cursor')
    print("  )")
    print()
    print("  print(f'Total: {len(resultados)}')")

    print("\nüì¶ Estructura esperada de respuesta:")
    print("  {")
    print('    "data": [...],        ‚Üê campo_datos')
    print('    "pagination": {')
    print('      "next_cursor": "..." ‚Üê campo_cursor (puede ser anidado)')
    print("    }")
    print("  }")

    print("\nüîß Campos anidados:")
    print("  - Si cursor est√° en pagination.next ‚Üí 'pagination.next'")
    print("  - Si est√° en meta.cursor ‚Üí 'meta.cursor'")
    print("  - Si est√° en response_metadata.next_cursor ‚Üí")
    print("    'response_metadata.next_cursor'")


def ejemplo_mejores_practicas():
    """
    Mejores pr√°cticas para paginaci√≥n.
    """
    print("\n" + "=" * 60)
    print("EJEMPLO 5E: Mejores Pr√°cticas")
    print("=" * 60)

    print("\n‚úÖ HACER:")
    print("  1. Leer documentaci√≥n de la API cuidadosamente")
    print("  2. Identificar tipo de paginaci√≥n (offset vs cursor)")
    print("  3. Usar l√≠mites razonables (50-100 items/p√°gina)")
    print("  4. Implementar l√≠mite de p√°ginas para testing")
    print("  5. Cachear resultados si no cambian frecuentemente")
    print("  6. Manejar errores en medio de paginaci√≥n")

    print("\n‚ùå NO HACER:")
    print("  1. Asumir que todas las APIs paginan igual")
    print("  2. Pedir pages muy grandes (>1000 items)")
    print("  3. Ignorar campos has_more o next_cursor=null")
    print("  4. Intentar decodificar/modificar cursores")
    print("  5. Hacer paginaci√≥n infinita sin l√≠mite")

    print("\nüéØ ¬øCu√°ndo usar cada tipo?")
    print()
    print("  USA OFFSET/LIMIT cuando:")
    print("    - Datos est√°ticos o que cambian poco")
    print("    - Necesitas saltar a p√°ginas espec√≠ficas")
    print("    - API simple sin cursor disponible")
    print()
    print("  USA CURSOR cuando:")
    print("    - Datos en tiempo real")
    print("    - Consistencia es cr√≠tica")
    print("    - API moderna (Twitter, Slack, Stripe...)")
    print("    - Datasets muy grandes")


if __name__ == "__main__":
    try:
        ejemplo_concepto_cursor()
        ejemplo_offset_vs_cursor()
        ejemplo_apis_cursor()
        ejemplo_uso_cursor()
        ejemplo_mejores_practicas()

        print("\n" + "=" * 60)
        print("‚úÖ ¬°Todos los ejemplos ejecutados correctamente!")
        print("=" * 60)
        print("\nüí° Nota: Este ejemplo es conceptual.")
        print("   Para probarlo con API real, necesitas una que use cursor.")

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        sys.exit(1)
