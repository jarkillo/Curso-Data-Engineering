"""
M√≥dulo de detecci√≥n de anomal√≠as

Detecta ca√≠das significativas en las ventas comparadas con el promedio hist√≥rico.

Regla de negocio:
- Si las ventas actuales son X% menores que el promedio hist√≥rico,
  se considera una anomal√≠a que requiere investigaci√≥n.
"""

from typing import Dict, List


def detectar_caida_ventas(
    total_actual: float, total_historico: float, umbral: float = 0.3
) -> Dict:
    """
    Detecta si hay una ca√≠da significativa en las ventas.

    Args:
        total_actual: Total de ventas del d√≠a actual
        total_historico: Promedio hist√≥rico de ventas
        umbral: Porcentaje de ca√≠da para considerar anomal√≠a (default: 0.3 = 30%)

    Returns:
        dict: Resultado de la detecci√≥n con estructura:
            {
                "anomalia": bool,
                "porcentaje_caida": float,
                "mensaje": str,
                "total_actual": float,
                "total_historico": float
            }

    Raises:
        ValueError: Si total_historico es cero

    Examples:
        >>> detectar_caida_ventas(700.0, 1000.0, umbral=0.3)
        {"anomalia": False, "porcentaje_caida": 0.3, ...}

        >>> detectar_caida_ventas(600.0, 1000.0, umbral=0.3)
        {"anomalia": True, "porcentaje_caida": 0.4, ...}
    """
    if total_historico <= 0:
        raise ValueError(
            "El total hist√≥rico no puede ser cero o negativo. "
            "Necesitas datos hist√≥ricos v√°lidos para detectar anomal√≠as."
        )

    # Calcular porcentaje de ca√≠da
    diferencia = total_historico - total_actual
    porcentaje_caida = diferencia / total_historico

    # Detectar si es anomal√≠a (ca√≠da > umbral)
    es_anomalia = porcentaje_caida > umbral

    # Construir mensaje
    if es_anomalia:
        mensaje = (
            f"‚ö†Ô∏è  ANOMAL√çA DETECTADA: Ca√≠da del {porcentaje_caida*100:.1f}% en ventas. "
            f"Actual: ${total_actual:,.2f} vs Hist√≥rico: ${total_historico:,.2f}"
        )
    else:
        mensaje = (
            f"‚úÖ Ventas normales. "
            f"Actual: ${total_actual:,.2f} vs Hist√≥rico: ${total_historico:,.2f}"
        )

    resultado = {
        "anomalia": es_anomalia,
        "porcentaje_caida": porcentaje_caida,
        "mensaje": mensaje,
        "total_actual": total_actual,
        "total_historico": total_historico,
        "umbral": umbral,
    }

    print(mensaje)

    return resultado


def calcular_promedio_historico(fechas: List[str]) -> float:
    """
    Calcula el promedio hist√≥rico de ventas basado en una lista de fechas.

    Lee los archivos CSV de las fechas especificadas y calcula el promedio
    de ventas totales.

    Args:
        fechas: Lista de fechas en formato YYYY-MM-DD

    Returns:
        float: Promedio de ventas totales

    Raises:
        ValueError: Si la lista est√° vac√≠a o no se pueden leer los archivos

    Examples:
        >>> fechas = ["2025-10-20", "2025-10-21", "2025-10-22"]
        >>> promedio = calcular_promedio_historico(fechas)
        >>> promedio
        1250.50
    """
    if not fechas:
        raise ValueError(
            "La lista de fechas no puede estar vac√≠a para calcular promedio hist√≥rico"
        )

    totales = []

    # Importar aqu√≠ para evitar dependencia circular
    from src.extraccion import extraer_ventas_csv, obtener_ruta_archivo

    for fecha in fechas:
        try:
            ruta = obtener_ruta_archivo(fecha)
            df = extraer_ventas_csv(ruta)
            total = df["total"].sum()
            totales.append(total)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  Archivo para fecha {fecha} no encontrado, omitiendo...")
            continue
        except Exception as e:
            print(f"‚ö†Ô∏è  Error al procesar fecha {fecha}: {str(e)}")
            continue

    if not totales:
        raise ValueError(
            "No se pudieron leer datos hist√≥ricos. "
            "Verifica que los archivos de las fechas especificadas existan."
        )

    promedio = sum(totales) / len(totales)

    print(
        f"üìà Promedio hist√≥rico calculado: ${promedio:,.2f} "
        f"(basado en {len(totales)} d√≠as)"
    )

    return float(promedio)
