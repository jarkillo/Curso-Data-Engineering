# ===============================================
# PR CHECKS - Verificaciones de Pull Request
# Master en Ingeniería de Datos
# ===============================================
# Se ejecuta en:
# - Pull Requests a dev o main
# ===============================================

name: ✅ PR Checks

on:
  pull_request:
    branches:
      - main
      - dev
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ===============================================
  # JOB 1: VALIDACIÓN DE PR
  # ===============================================
  pr-validation:
    name: 📋 Validación de PR
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Verificar título del PR
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          requireScope: false
          subjectPattern: ^[A-Z].+$
          subjectPatternError: |
            El título debe empezar con mayúscula.
            Formato: tipo: Descripción
            Ejemplo: feat: Añadir nueva funcionalidad

      - name: 📝 Verificar descripción del PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr.body || pr.body.length < 20) {
              core.setFailed('❌ El PR debe tener una descripción de al menos 20 caracteres');
            } else {
              core.info('✅ Descripción del PR válida');
            }

      - name: 🔍 Verificar archivos modificados
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const largeFiles = files.filter(f => f.changes > 500);
            if (largeFiles.length > 0) {
              core.warning('⚠️ Archivos con más de 500 cambios: ' +
                largeFiles.map(f => f.filename).join(', '));
            }

            const totalChanges = files.reduce((sum, f) => sum + f.changes, 0);
            core.info(`📊 Total de cambios: ${totalChanges}`);

  # ===============================================
  # JOB 2: ANÁLISIS DE CAMBIOS
  # ===============================================
  changes-analysis:
    name: 📊 Análisis de Cambios
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detectar archivos modificados
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - '**/*.py'
            tests:
              - 'tests/**'
            docs:
              - 'documentacion/**'
              - '**/*.md'
            config:
              - '**/*.yml'
              - '**/*.yaml'
              - '**/*.toml'
              - '**/*.json'
            docker:
              - 'docker-compose.yml'
              - 'Dockerfile'
            airflow:
              - 'airflow/**'

      - name: 📝 Comentar cambios detectados
        uses: actions/github-script@v7
        with:
          script: |
            const changes = ${{ toJSON(steps.changes.outputs) }};
            let comment = '## 📊 Análisis de Cambios\n\n';

            if (changes.python === 'true') comment += '🐍 Código Python modificado\n';
            if (changes.tests === 'true') comment += '🧪 Tests modificados\n';
            if (changes.docs === 'true') comment += '📚 Documentación modificada\n';
            if (changes.config === 'true') comment += '⚙️ Configuración modificada\n';
            if (changes.docker === 'true') comment += '🐳 Docker modificado\n';
            if (changes.airflow === 'true') comment += '🌊 Airflow modificado\n';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===============================================
  # JOB 3: VERIFICACIÓN DE TESTS
  # ===============================================
  test-coverage:
    name: 🧪 Cobertura de Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: 🧪 Ejecutar tests con cobertura
        run: |
          pytest tests/ --cov=. --cov-report=term-missing --cov-report=json

      - name: 📊 Comentar cobertura en PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
              const percent = coverage.totals.percent_covered.toFixed(2);

              let emoji = '✅';
              if (percent < 80) emoji = '⚠️';
              if (percent < 60) emoji = '❌';

              const comment = `## ${emoji} Cobertura de Tests: ${percent}%\n\n` +
                `- Líneas cubiertas: ${coverage.totals.covered_lines}\n` +
                `- Líneas totales: ${coverage.totals.num_statements}\n` +
                `- Líneas faltantes: ${coverage.totals.missing_lines}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              core.info('No se pudo leer el reporte de cobertura');
            }

  # ===============================================
  # JOB 4: VERIFICACIÓN DE SEGURIDAD
  # ===============================================
  security-check:
    name: 🔒 Verificación de Seguridad
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]
          pip install -r requirements.txt

      - name: 🔒 Ejecutar Bandit
        run: |
          bandit -r . -c pyproject.toml -f json -o bandit-report.json || true

      - name: 📊 Comentar resultados de seguridad
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
              const high = report.metrics._totals['SEVERITY.HIGH'] || 0;
              const medium = report.metrics._totals['SEVERITY.MEDIUM'] || 0;
              const low = report.metrics._totals['SEVERITY.LOW'] || 0;

              let emoji = '✅';
              if (high > 0) emoji = '❌';
              else if (medium > 0) emoji = '⚠️';

              const comment = `## ${emoji} Análisis de Seguridad (Bandit)\n\n` +
                `- 🔴 Alta: ${high}\n` +
                `- 🟡 Media: ${medium}\n` +
                `- 🟢 Baja: ${low}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              core.info('No se pudo leer el reporte de seguridad');
            }
