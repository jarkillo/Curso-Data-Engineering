# ===============================================
# CI/CD - Integración Continua
# Master en Ingeniería de Datos
# ===============================================
# Se ejecuta en:
# - Push a dev o main
# - Pull Requests a dev o main
# ===============================================

name: 🔄 CI - Integración Continua

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

# Permisos necesarios
permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ===============================================
  # JOB 1: LINTING Y FORMATEO
  # ===============================================
  lint:
    name: 🔍 Linting y Formateo
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
          pip install -r requirements.txt

      - name: ⚫ Black - Verificar formato
        run: black --check --diff .

      - name: 📚 isort - Verificar imports
        run: isort --check-only --diff .

      - name: 🔍 Flake8 - Linting
        run: flake8 .

      - name: 🔎 MyPy - Type checking
        run: mypy . --ignore-missing-imports || true

  # ===============================================
  # JOB 2: TESTS
  # ===============================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        python-version: ['3.13']

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r requirements.txt

      - name: 🧪 Ejecutar tests
        run: |
          pytest tests/ -v --tb=short --maxfail=5

      - name: 📊 Generar reporte de cobertura
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

      - name: 📤 Subir cobertura a Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ===============================================
  # JOB 3: SEGURIDAD
  # ===============================================
  security:
    name: 🔒 Análisis de Seguridad
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety
          pip install -r requirements.txt

      - name: 🔒 Bandit - Análisis de seguridad
        run: bandit -r . -c pyproject.toml || true

      - name: 🛡️ Safety - Verificar vulnerabilidades
        run: safety check --json || true

  # ===============================================
  # JOB 4: BUILD Y VALIDACIÓN
  # ===============================================
  build:
    name: 🏗️ Build y Validación
    runs-on: ubuntu-latest
    needs: [lint, test, security]

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐍 Configurar Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: 📦 Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt

      - name: 🏗️ Build del paquete
        run: python -m build

      - name: ✅ Verificar distribución
        run: twine check dist/*

  # ===============================================
  # JOB 5: REPORTE FINAL
  # ===============================================
  report:
    name: 📊 Reporte Final
    runs-on: ubuntu-latest
    needs: [lint, test, security, build]
    if: always()

    steps:
      - name: ✅ CI Completado
        run: |
          echo "✅ Todos los checks de CI completados"
          echo "🔍 Linting: ${{ needs.lint.result }}"
          echo "🧪 Tests: ${{ needs.test.result }}"
          echo "🔒 Seguridad: ${{ needs.security.result }}"
          echo "🏗️ Build: ${{ needs.build.result }}"
